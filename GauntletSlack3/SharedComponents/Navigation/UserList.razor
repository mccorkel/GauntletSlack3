@implements IDisposable
@using GauntletSlack3.Services.Interfaces
@using GauntletSlack3.Shared.Models
@inject UserStateService UserStateService
@inject IUserService UserService
@inject ILogger<UserList> Logger
@inject RealTimeService RealTimeService

<div class="users-list">
    <div class="users-header">
        <h3>Users (@(users?.Count ?? 0))</h3>
        <div class="user-controls">
            <button class="btn btn-sm @(isOnline ? "btn-success" : "btn-outline-secondary")"
                    @onclick="ToggleStatus">
                <span class="status-dot @(isOnline ? "online" : "offline")"></span>
                @(isOnline ? "Online" : "Offline")
            </button>
        </div>
        <div class="search-container">
            <input type="text" 
                   class="form-control form-control-sm"
                   placeholder="Search users..." 
                   @bind="searchText" 
                   @bind:event="oninput" />
            @if (!string.IsNullOrEmpty(searchText))
            {
                <button class="clear-search" @onclick="() => searchText = string.Empty">Ã—</button>
            }
        </div>
    </div>
    @foreach (var user in FilteredUsers)
    {
        <div class="user-item">
            <span class="user-status @(IsUserOnline(user.Id) ? "online" : "offline")"></span>
            <span class="user-name">@user.Name</span>
        </div>
    }
</div>

<style>
    .users-list {
        padding: 1rem;
        border-top: 1px solid var(--bs-gray-700);
    }

    .users-header {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .user-controls {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .search-container {
        position: relative;
        flex: 1;
    }

    .clear-search {
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: var(--bs-gray-500);
        cursor: pointer;
        padding: 0 4px;
    }

    .status-dot {
        display: inline-block;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 4px;
    }

    .status-dot.online {
        background-color: var(--bs-success);
    }

    .status-dot.offline {
        background-color: var(--bs-gray-500);
    }

    .user-item {
        display: flex;
        align-items: center;
        padding: 0.25rem 0.5rem;
        cursor: pointer;
        border-radius: 4px;
        transition: background-color 0.2s;
    }

    .user-item:hover {
        background-color: var(--bs-gray-700);
    }

    .user-item.current-user {
        font-weight: bold;
        background-color: var(--bs-gray-800);
    }

    .user-status {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 0.5rem;
    }

    .online {
        background-color: var(--bs-success);
    }

    .offline {
        background-color: var(--bs-danger);
    }

    .current-user {
        font-weight: bold;
    }

    .status-toggle {
        margin-left: auto;
        padding: 2px 8px;
        font-size: 0.8rem;
        border-radius: 4px;
        border: 1px solid var(--bs-gray-600);
        background: transparent;
        color: var(--bs-gray-400);
    }

    .status-toggle:hover {
        background-color: var(--bs-gray-700);
    }
</style>

@code {
    private List<User> users = new();
    private string searchText = "";
    private bool isOnline = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        try 
        {
            await RealTimeService.StartAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initialize SignalR connection");
        }
        UserStateService.OnUserStatusChanged += HandleUserStatusChanged;
        RealTimeService.OnUserJoined += HandleUserJoined;
    }

    private async void HandleUserStatusChanged(object? sender, EventArgs e)
    {
        try 
        {
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling user status change");
        }
    }

    private async void HandleUserJoined(object? sender, int userId)
    {
        try
        {
            await LoadUsers();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling new user joined");
        }
    }

    private async Task ToggleStatus()
    {
        try
        {
            isOnline = !isOnline;
            var userId = await UserService.GetCurrentUserId();
            await UserStateService.SetUserOnlineStatus(userId, isOnline);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error toggling user status");
            isOnline = !isOnline;
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            users = await UserService.GetUsersAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading users");
        }
    }

    private bool IsUserOnline(int userId)
    {
        var isOnline = UserStateService.IsUserOnline(userId);
        return isOnline;
    }

    private IEnumerable<User> FilteredUsers =>
        users.Where(u => u.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase));

    public void Dispose()
    {
        UserStateService.OnUserStatusChanged -= HandleUserStatusChanged;
        RealTimeService.OnUserJoined -= HandleUserJoined;
    }
} 