@implements IAsyncDisposable
@using GauntletSlack3.Services.Interfaces
@using GauntletSlack3.Shared.Models
@using System.Timers
@inject IUserStateService UserStateService
@inject IUserService UserService
@inject RealTimeService RealTimeService

<div class="users-list">
    <div class="users-header">
        <h3>Users (@(users?.Count ?? 0))</h3>
    </div>
    @if (users != null)
    {
        @foreach (var user in users.OrderBy(u => u.Name))
        {
            <div class="user-item @(user.Id == UserStateService.CurrentUserId ? "current-user" : "")">
                <span class="user-status @(user.IsOnline ? "online" : "offline")"></span>
                <span class="user-name">@user.Name</span>
                @if (user.Id == UserStateService.CurrentUserId)
                {
                    <button class="status-toggle" @onclick="ToggleStatus">
                        @(user.IsOnline ? "Set Offline" : "Set Online")
                    </button>
                }
            </div>
        }
    }
    else
    {
        <div class="text-muted">
            <span class="oi oi-loop-circular spinning"></span> Loading users...
        </div>
    }
</div>

<style>
    .users-list {
        padding: 1rem;
        border-top: 1px solid var(--bs-gray-700);
    }

    .users-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
    }

    .user-item {
        display: flex;
        align-items: center;
        padding: 0.25rem 0.5rem;
        cursor: pointer;
        border-radius: 4px;
        transition: background-color 0.2s;
    }

    .user-item:hover {
        background-color: var(--bs-gray-700);
    }

    .user-item.current-user {
        font-weight: bold;
        background-color: var(--bs-gray-800);
    }

    .user-status {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 0.5rem;
    }

    .online {
        background-color: #28a745;
    }

    .offline {
        background-color: #dc3545;
    }

    .current-user {
        font-weight: bold;
    }

    .status-toggle {
        margin-left: auto;
        padding: 2px 8px;
        font-size: 0.8rem;
        border-radius: 4px;
        border: 1px solid var(--bs-gray-600);
        background: transparent;
        color: var(--bs-gray-400);
    }

    .status-toggle:hover {
        background-color: var(--bs-gray-700);
    }
</style>

@code {
    private List<User>? users;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadUsers();
            UserStateService.OnUserStateChanged += OnUserStateChanged;
            if (RealTimeService != null)
            {
                RealTimeService.OnUserStatusChanged += HandleUserStatusChanged;
                await RealTimeService.StartAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
        }
    }

    private void OnUserStateChanged()
    {
        _ = InvokeAsync(async () => 
        {
            await LoadUsers();
            StateHasChanged();
        });
    }

    private void HandleUserStatusChanged(object? sender, UserStatusChangedEventArgs e)
    {
        if (users == null) return;
        var user = users.FirstOrDefault(u => u.Id == e.UserId);
        if (user != null)
        {
            user.IsOnline = e.IsOnline;
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            users = await UserService.GetAllUsersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    private async Task ToggleStatus()
    {
        if (!UserStateService.CurrentUserId.HasValue) return;
        
        var currentUser = users?.FirstOrDefault(u => u.Id == UserStateService.CurrentUserId.Value);
        if (currentUser == null) return;

        try
        {
            var newStatus = !currentUser.IsOnline;
            await UserService.UpdateUserStatusAsync(currentUser.Id, newStatus);
            currentUser.IsOnline = newStatus;
            await RealTimeService.UpdateUserStatusAsync(currentUser.Id, newStatus);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating status: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        UserStateService.OnUserStateChanged -= OnUserStateChanged;
        if (RealTimeService != null)
        {
            RealTimeService.OnUserStatusChanged -= HandleUserStatusChanged;
        }
    }
} 