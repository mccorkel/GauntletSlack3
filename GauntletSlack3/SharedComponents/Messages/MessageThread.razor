@using GauntletSlack3.Services.Interfaces
@using GauntletSlack3.Shared.Models
@inject IMessageService MessageService
@inject IUserService UserService
@inject ILogger<MessageThread> Logger

@if (IsOpen && ParentMessage != null)
{
    <div class="thread-overlay">
        <div class="thread-container">
            <div class="thread-header">
                <h4>Thread</h4>
                <button class="btn btn-link" @onclick="CloseThread">
                    <span class="oi oi-x"></span>
                </button>
            </div>

            <div class="thread-content">
                <div class="parent-message">
                    <div class="message-header">
                        <span class="user-name">@ParentMessage.User?.Name</span>
                        <span class="timestamp">@ParentMessage.CreatedAt.ToLocalTime().ToString("g")</span>
                    </div>
                    <div class="message-content">
                        @ParentMessage.Content
                    </div>
                </div>

                <div class="replies-container" @ref="repliesContainer">
                    @if (isLoadingReplies)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (replies?.Any() == true)
                    {
                        @foreach (var reply in replies)
                        {
                            <div class="reply">
                                <div class="message-header">
                                    <span class="user-name">@reply.User?.Name</span>
                                    <span class="timestamp">@reply.CreatedAt.ToLocalTime().ToString("g")</span>
                                </div>
                                <div class="message-content">
                                    @reply.Content
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center text-muted">
                            No replies yet. Start the conversation!
                        </div>
                    }
                </div>
            </div>

            <div class="reply-input">
                <div class="input-group">
                    <input type="text" class="form-control" 
                           placeholder="Reply to thread..."
                           @bind="replyText"
                           @bind:event="oninput"
                           @onkeyup="HandleKeyPress" />
                    <button class="btn btn-primary" 
                            @onclick="SendReply"
                            disabled="@(string.IsNullOrWhiteSpace(replyText) || isSending)">
                        @if (isSending)
                        {
                            <span class="spinner-border spinner-border-sm me-1"></span>
                            <span>Sending...</span>
                        }
                        else
                        {
                            <span>Reply</span>
                        }
                    </button>
                </div>
                @if (error != null)
                {
                    <div class="alert alert-danger mt-2">@error</div>
                }
            </div>
        </div>
    </div>
}

<style>
    .thread-overlay {
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
        width: 400px;
        background: white;
        box-shadow: -2px 0 5px rgba(0,0,0,0.1);
        display: flex;
        flex-direction: column;
        z-index: 1000;
    }

    .thread-container {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .thread-header {
        padding: 1rem;
        border-bottom: 1px solid #e0e0e0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .thread-content {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
    }

    .parent-message {
        padding: 1rem;
        background: #f8f9fa;
        border-radius: 4px;
        margin-bottom: 1rem;
    }

    .replies-container {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .reply-input {
        padding: 1rem;
        border-top: 1px solid #e0e0e0;
    }
</style>

@code {
    [Parameter] public Message? ParentMessage { get; set; }
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public EventCallback<Message> OnMessageUpdated { get; set; }

    private string replyText = string.Empty;
    private bool isSending;
    private bool isLoadingReplies;
    private string? error;
    private ElementReference repliesContainer;
    private bool shouldScrollToBottom;
    private List<Message>? replies;

    protected override async Task OnParametersSetAsync()
    {
        if (IsOpen && ParentMessage != null)
        {
            await LoadReplies();
        }
    }

    private async Task LoadReplies()
    {
        try
        {
            isLoadingReplies = true;
            var message = await MessageService.GetMessageAsync(ParentMessage!.Id);
            if (message != null)
            {
                replies = message.Replies;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading replies for message {MessageId}", ParentMessage?.Id);
            error = "Failed to load replies. Please try again.";
        }
        finally
        {
            isLoadingReplies = false;
            StateHasChanged();
        }
    }

    private async Task SendReply()
    {
        if (string.IsNullOrWhiteSpace(replyText)) return;
        try
        {
            var userId = await UserService.GetCurrentUserId();
            await MessageService.SendReplyAsync(
                ParentMessage.Id,
                userId,
                replyText
            );
            replyText = string.Empty;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error sending reply to message {MessageId}", ParentMessage.Id);
            error = "Failed to send reply. Please try again.";
        }
        finally
        {
            isSending = false;
            StateHasChanged();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(replyText))
        {
            await SendReply();
        }
    }

    private async Task CloseThread()
    {
        await IsOpenChanged.InvokeAsync(false);
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await repliesContainer.FocusAsync();
            await Task.Delay(100); // Give time for the UI to update
            await repliesContainer.FocusAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error scrolling to bottom: {ex.Message}");
        }
    }
} 