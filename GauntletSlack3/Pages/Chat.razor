@page "/chat"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using GauntletSlack3.Services.Interfaces
@using GauntletSlack3.SharedComponents
@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject IChannelService ChannelService
@inject IUserStateService UserStateService
@inject AuthenticationStateProvider AuthStateProvider

<div class="chat-container">
    @if (isInitialized)
    {
        <NavMenu />
        
        <div class="chat-content">
            <h3>Select a channel to start chatting</h3>
        </div>
    }
    else
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>Loading...</p>
        </div>
    }
</div>

@code {
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? false)
        {
            Console.WriteLine("User is not authenticated");
            NavigationManager.NavigateTo("/");
            return;
        }

        if (!UserStateService.CurrentUserId.HasValue)
        {
            Console.WriteLine("User is not initialized");
            NavigationManager.NavigateTo("/");
            return;
        }

        isInitialized = true;
        
        // Get user's channels and redirect to first one if available
        var channels = await ChannelService.GetUserChannelsAsync(UserStateService.CurrentUserId.Value);
        var userChannels = channels
            .Where(c => c.Memberships?.Any(m => m.UserId == UserStateService.CurrentUserId) == true)
            .OrderBy(c => c.Name)
            .ToList();
        
        if (userChannels.Any())
        {
            NavigationManager.NavigateTo($"/channel/{userChannels.First().Id}");
        }
    }
}
