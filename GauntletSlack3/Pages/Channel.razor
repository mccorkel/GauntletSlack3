@page "/channel/{ChannelId:int}"
@layout GauntletSlack3.SharedComponents.Layouts.AuthenticatedLayout
@using GauntletSlack3.Services.Interfaces
@using GauntletSlack3.Shared.Models
@using GauntletSlack3.SharedComponents
@inject IChannelService ChannelService
@inject IUserStateService UserStateService
@inject NavigationManager NavigationManager
@inject IMessageService MessageService

<div class="channel-container">
    <div class="channel-header">
        <h2># @channel?.Name</h2>
        <button class="btn btn-danger" @onclick="LeaveChannel">Leave Channel</button>
    </div>
    
    @if (channel != null)
    {
        <ChannelMembersBar Channel="@channel" />

        <div class="messages-container">
            @foreach (var message in channel.Messages.OrderBy(m => m.CreatedAt))
            {
                <div class="message">
                    <div class="message-header">
                        <span class="user-name">@message.User?.Name</span>
                        <span class="timestamp">@message.CreatedAt.ToLocalTime()</span>
                    </div>
                    <div class="message-content">
                        @message.Content
                    </div>
                </div>
            }
        </div>

        <div class="message-input-container">
            <div class="input-group">
                <input type="text" class="form-control" 
                       placeholder="Type a message..." 
                       @bind="newMessage" 
                       @bind:event="oninput"
                       @onkeyup="HandleKeyPress" />
                <button class="btn btn-primary" @onclick="SendMessage">
                    Send
                </button>
            </div>
        </div>
    }

    @if (error != null)
    {
        <div class="alert alert-danger">@error</div>
    }
</div>

@code {
    [Parameter] public int ChannelId { get; set; }
    private GauntletSlack3.Shared.Models.Channel? channel;
    private string? error;
    private string newMessage = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var channels = await ChannelService.GetUserChannelsAsync(UserStateService.CurrentUserId!.Value);
            channel = channels.FirstOrDefault(c => c.Id == ChannelId);
            
            if (channel == null)
            {
                error = "Channel not found";
                NavigationManager.NavigateTo("/chat");
            }
        }
        catch (Exception ex)
        {
            error = "Error loading channel";
            Console.WriteLine($"Error loading channel: {ex.Message}");
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newMessage))
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage) || !UserStateService.CurrentUserId.HasValue) return;

        try
        {
            await MessageService.SendMessageAsync(ChannelId, UserStateService.CurrentUserId.Value, newMessage);
            newMessage = string.Empty;
            await RefreshChannel();
        }
        catch (Exception ex)
        {
            error = "Error sending message";
            Console.WriteLine($"Error sending message: {ex.Message}");
        }
    }

    private async Task RefreshChannel()
    {
        try
        {
            var channels = await ChannelService.GetUserChannelsAsync(UserStateService.CurrentUserId!.Value);
            channel = channels.FirstOrDefault(c => c.Id == ChannelId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            error = "Error refreshing channel";
            Console.WriteLine($"Error refreshing channel: {ex.Message}");
        }
    }

    private async Task LeaveChannel()
    {
        try
        {
            if (UserStateService.CurrentUserId.HasValue)
            {
                await ChannelService.LeaveChannelAsync(ChannelId, UserStateService.CurrentUserId.Value);
                NavigationManager.NavigateTo("/chat");
            }
        }
        catch (Exception ex)
        {
            error = "Error leaving channel";
            Console.WriteLine($"Error leaving channel: {ex.Message}");
        }
    }
} 