@page "/test-message"
@using GauntletSlack3.Shared.Models
@using GauntletSlack3.Services
@inject IMessageService MessageService

<h3>Test Database Operations</h3>

<div class="mb-3">
    <h4>Messages</h4>
    <button class="btn btn-primary" @onclick="SaveTestMessage">Save Test Message</button>
    <button class="btn btn-info" @onclick="GetMessages">Get Messages</button>
</div>

<div class="mb-3">
    <h4>Channels</h4>
    <button class="btn btn-primary" @onclick="SaveTestChannel">Save Test Channel</button>
    <button class="btn btn-info" @onclick="GetChannels">Get Channels</button>
</div>

@if (_message != null)
{
    <div class="alert alert-success">
        <h5>Last Saved Message:</h5>
        <p><strong>From:</strong> @(_message.User?.Name ?? _message.UserId)</p>
        <p><strong>Content:</strong> @_message.Content</p>
        <p><strong>Channel ID:</strong> @_message.ChannelId</p>
        <p><strong>Created At:</strong> @_message.CreatedAt.ToString("g")</p>
    </div>
}

@if (_messages?.Any() == true)
{
    <div class="alert alert-info">
        <h5>Retrieved Messages:</h5>
        @foreach (var msg in _messages)
        {
            <div class="border-bottom mb-2 p-2">
                <p class="mb-1"><strong>From:</strong> @(msg.User?.Name ?? msg.UserId)</p>
                <p class="mb-1"><strong>Content:</strong> @msg.Content</p>
                <p class="mb-1"><small class="text-muted">Channel ID: @msg.ChannelId | Created: @msg.CreatedAt.ToString("g")</small></p>
            </div>
        }
    </div>
}

@if (_channels?.Any() == true)
{
    <div class="alert alert-info">
        <h5>Retrieved Channels:</h5>
        @foreach (var channel in _channels)
        {
            <div class="border-bottom mb-2 p-2">
                <p class="mb-1"><strong>Name:</strong> @channel.Name</p>
                <p class="mb-1"><strong>Type:</strong> @channel.Type</p>
                <p class="mb-1"><small class="text-muted">ID: @channel.Id</small></p>
            </div>
        }
    </div>
}

@code {
    private Message? _message;
    private List<Message>? _messages;
    private List<Channel>? _channels;

    private async Task SaveTestMessage()
    {
        try
        {
            var message = new Message
            {
                Content = "Test message " + DateTime.Now.ToString(),
                UserId = "testUser",
                CreatedAt = DateTime.Now
            };

            _message = await MessageService.SaveMessage(1, message);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving message: {ex.Message}");
        }
    }

    private async Task GetMessages()
    {
        try
        {
            _messages = await MessageService.GetChannelMessages(1);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting messages: {ex.Message}");
        }
    }

    private async Task SaveTestChannel()
    {
        try
        {
            var channel = new Channel
            {
                Name = "test-" + DateTime.Now.Ticks,
                Type = "public",
                OwnerId = "testUser",
                CreatedAt = DateTime.Now
            };

            await MessageService.SaveChannel(channel);
            await GetChannels();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving channel: {ex.Message}");
        }
    }

    private async Task GetChannels()
    {
        try
        {
            _channels = await MessageService.GetChannels();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting channels: {ex.Message}");
        }
    }
} 