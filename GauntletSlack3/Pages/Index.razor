@page "/"
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IUserStateService UserStateService
@using System.Security.Claims
@using GauntletSlack3.Services.Interfaces

@if (isLoading)
{
    <div class="loading-container visible">
        <div class="spinner"></div>
        <p>Loading...</p>
    </div>
}
else
{
    <div class="login-container">
        <h2>Welcome to Gauntlet Slack</h2>
        <button class="btn btn-primary" @onclick="RedirectToAuth">
            Sign in
        </button>
    </div>
}

@code {
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Index.OnInitializedAsync started");
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated ?? false)
        {
            Console.WriteLine("User is authenticated");
            var email = authState.User.FindFirst("preferred_username")?.Value;
            var name = authState.User.FindFirst("name")?.Value;
            
            // Debug: Print all claims
            foreach (var claim in authState.User.Claims)
            {
                Console.WriteLine($"Claim: {claim.Type} = {claim.Value}");
            }
            
            Console.WriteLine($"Found email: {email}, name: {name}");
            if (!string.IsNullOrEmpty(email) && !string.IsNullOrEmpty(name))
            {
                try {
                    Console.WriteLine("Initializing user state...");
                    await UserStateService.InitializeAsync();
                    Console.WriteLine($"User state initialized. CurrentUserId: {UserStateService.CurrentUserId}");
                }
                catch (Exception ex) {
                    Console.WriteLine($"Error initializing user: {ex.Message}");
                    isLoading = false;
                    return;
                }
            }
            else
            {
                Console.WriteLine("Email or name is empty, not redirecting");
                isLoading = false;
                return;
            }
            NavigationManager.NavigateTo("/chat", forceLoad: false);
        }
        isLoading = false;
    }

    private void RedirectToAuth()
    {
        NavigationManager.NavigateTo("/authentication/login");
    }
} 